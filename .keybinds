#!/bin/zsh


# -- vim-like keys binds
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history


# -- CTRL-E for abrupt terminal-vim editing
autoload edit-command-line; zle -N edit-command-line
bindkey '^e' edit-command-line


SEARCH_DIR=$HOME/Repositories

# https://github.com/junegunn/fzf/wiki/examples#changing-directory
# -- using ([) for finding and opening a file (fzf + vim)
function ffind-file () {
file=$(find $SEARCH_DIR -type f | fzf --height 25  --preview 'bat --style=numbers --color=always --line-range :100 {}')

if [ -z ${file} ]; then
    # if no file is selected, do nothing
else
    # if a file is selected, open with vim
    vim $file
fi
}
bindkey -s "\[" 'ffind-file\n'


# -- using (]) to open a directory using fzf
function ffind-dir () {
local dir
dir=$(find ${1:-$HOME} -type d 2> /dev/null | fzf +m) && cd "$dir"
}
bindkey -s "\]" "ffind-dir\n"


# -- using (*) to grep a string pattern in a directory using fzf
function fif () {
    if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
    rg --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}
bindkey -s "\*" "fif"


# -- using ; to launch vim
function vim-launch () { vim; }
bindkey -s "\\" 'vim-launch\n'


# -- using Q to exit the terminal
function quick-exit () {
exit
zle accept-line
}
zle -N quick-exit # define widget from function

bindkey -M viins 'Q' quick-exit # bind widget to key in viins mode
bindkey -M vicmd 'Q' quick-exit # bind widget to Ctrl+X in vicmd mode

