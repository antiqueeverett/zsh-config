#!/bin/zsh

# git aliases Everett M - 20/July/2020
# submodule workflows (gg to avoid conflicts)

function is-submodule() {
	(cd "$(git rev-parse --show-toplevel)/.." &&
		git rev-parse --is-inside-work-tree) | grep -q true
}

# -- removing a submodule
function ggsub-remove() {
	git submodule deinit -f -- $1
	rm -rf .git/modules/$1
	git rm -f $1
}

# -- pulling submodules
function ggsub-pull() {
	if [[ $(git submodule foreach 'git status') ]]; then # if submodules exist
		git submodule update --remote
		git pull --recurse-submodules
	else
		git pull
	fi
}

# -- ignoring submodules
function ggsub-ignore() {
	eval "git config submodule.$1.ignore all"
}

# -- showing all submodules
function ggsub-list() {
	git config --file .gitmodules --get-regexp path | awk '{ print $2 }'
}

# -- checking the most recent change
function gg-diff() {
	if git diff-index --quiet HEAD --; then # if after commit
		git diff HEAD^ HEAD
	else
		if git diff --cached --exit-code; then # if after state
			git diff
		else
			git diff --cached # if after change
		fi
	fi
}

# -- pushing submodules
function ggsub-push() {
	CURRENT_DIR=$PWD
	if [[ $(git submodule foreach 'git status') ]]; then
		for dir in $(find $PWD -maxdepth 1 -mindepth 1 -type d); do
			cd $dir
			if [[ -f .git ]]; then
				if [[ $(git diff --stat) != '' ]]; then
					echo
					printf '%s\n' "${PWD##*/}"
					git diff --quiet || echo ' -- dirty' # check working tree
				else
					echo
					printf '%s\n' "${PWD##*/}"
					[[ -n $(git status -s) ]] || echo ' -- clean'
				fi
			else
			fi
		done
		echo -n "\n -- Continue push?  [Y/N]"
		read REPLY
		if [[ $REPLY =~ ^[Yy]$ ]]; then
			git push origin master
		fi
	else
		git push origin master
	fi
	cd $CURRENT_DIR
}

# -- checking status all repositories
function report() {
	CURRENT_DIR=$PWD
	for dir in $(find $HOME/Repositories -maxdepth 2 -mindepth 1 -type d); do
		cd $dir
		if [ -d .git ]; then
			if [[ $(git diff --stat) != '' ]]; then
				echo
				basename $(git rev-parse --show-toplevel) # get repo name
				git diff --quiet || echo ' -- dirty'      # check working tree
			fi
		else
			git rev-parse --git-dir &>/dev/null
		fi
	done
	cd $CURRENT_DIR
}

function gg-commit() {
	eval "git commit -m \"$@\""
}

# -- removing files
function gg-remove-file() {
	git rm --cached $1
	rm -rf $1
}

# -- add submodule
alias ggsubadd='git submodule add'

# -- remove submodule
alias ggsubrm='ggsub-remove'

# -- pull submodules
alias ggpull='ggsub-pull'

# -- push submodules
alias ggpush='ggsub-push'

# --list submodules
alias ggsublist='ggsub-list'

# -- ignore submodule
alias ggsubignore='ggsub-ignore'

# -- global status report on all repos
alias ggstatus=report

# -- remove file
alias ggrmfile='gg-remove-file'

# -- clone
alias ggclone='git clone'

# -- check out
alias ggco='git checkout'

# -- mv file
alias ggmv='git mv'

# -- check repo size
alias ggsize='git count-objects -vH'

# -- check repo status
alias ggs='git status'

# -- stage all changes
alias gga='git add .'

# -- select what to stage
alias ggpatch='git add --patch $1'

# -- commit
alias ggc='gg-commit'

# -- rebase
alias ggrebase='git rebase -i'

# -- list tracked
alias gglisttracked='git ls-tree -r master --name-only'

# -- reset hard
alias ggrhard='git reset --hard'

# -- reset soft
alias ggrsoft='git reset --soft'

# -- show latest change
alias ggdiff='gg-diff'

# -- use diff tool
alias ggdifftool='git difftool'

# -- viewing logs
alias ggl='git log'
alias ggrl='git reflog'
alias ggverify='git log --pretty="format:%h %G? %aN  %s"'
