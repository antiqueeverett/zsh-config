#!/bin/zsh

# helper functions ------------------------------------------------------------

function backup_dotfiles() {
	if [ -d "$BACKUP_PATH/" ]; then
		rm -Rf "$BACKUP_PATH/"
	fi

	mkdir "$BACKUP_PATH/"

	if ! tr <"$DOTFILES_LIST" ' ' _ |
		xargs -n1 -I {} mv "$HOME/"{} "$BACKUP_PATH/"; then
		printf "\n-- backing up current dotfiles failed! \n"
	fi
}

function update_dotfiles() {
	if tr <"$DOTFILES_LIST" ' ' _ |
		xargs -n1 -I {} cp -R "$DOTFILES_PATH/"{} "$HOME/"; then
	else
		printf "-- dotfiles update failed! \n"
	fi
	cp $DOTFILES_PATH/init.vim $NEOVIM_CONFIG_PATH
}

# defining function widgets ---------------------------------------------------

# source_dotfiles widget
function source_dotfiles() {
	if backup_dotfiles && update_dotfiles; then
		source $HOME/.zshrc &>/dev/null </dev/tty
	fi
	zle accept-line
}
zle -N source_dotfiles

# ffind widget (for fuzzy finding files)
function ffind() {
	file=$(
		fd . "$FZF_ROOT" --type f --hidden --follow --exclude ".git" | fzf \
			--height 25 \
			--preview 'bat --style=numbers --color=always --line-range :20 {}'
	)

	if [ -n "${file}" ]; then
		nvim "$file" </dev/tty ||
			vim "$file" </dev/tty
	fi
	zle accept-line
}
zle -N ffind

# ffind widget (for fuzzy finding directories)
function dfind() {
	local dir
	dir=$(fd . "$FZF_ROOT" --type d --hidden --follow --exclude ".git" |
		fzf +m) && cd "$dir" || return
	zle accept-line
}
zle -N dfind

# exit terminal widget
function exit_terminal() {
	exit
	zle accept-line
}
zle -N exit_terminal

# key mapping function widgets ------------------------------------------------

# exit terminal using [q]: normal mode
bindkey -M vicmd 'q' exit_terminal # in vim cmd mode

# source dotfiles using [`]: normal & in insert modes
bindkey -M viins "\`" source_dotfiles
bindkey -M vicmd "\`" source_dotfiles

# fuzzy find and open a file using [[]: normal & in insert modes
bindkey -M viins "\[" ffind
bindkey -M vicmd "\[" ffind

# fuzzy find and cd into a directory using []]: normal & in insert modes
bindkey -M viins "\]" dfind
bindkey -M vicmd "\]" dfind

# Vim key movement
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
