#!/bin/zsh

# helper functions ------------------------------------------------------------

function backup_dotfiles() {
    if [ -d "$BACKUP_PATH/" ]; then
        rm -Rf "$BACKUP_PATH/"
    fi

    mkdir "$BACKUP_PATH/"

    if ! tr <"$DOTFILES_LIST" ' ' _ |
        xargs -n1 -I {} mv "$HOME/"{} "$BACKUP_PATH/"; then
            printf "\n-- backing up current dotfiles failed! \n"
    fi
}

function update_dotfiles() {
    if tr <"$DOTFILES_LIST" ' ' _ |
        xargs -n1 -I {} cp -R "$DOTFILES_PATH/"{} "$HOME/"; then
        else
            printf "-- dotfiles update failed! \n"
    fi
    cp $DOTFILES_PATH/init.vim $NEOVIM_CONFIG_PATH
}

# defining function widgets ---------------------------------------------------




# source_dotfiles widget
function source_dotfiles() {
    if backup_dotfiles && update_dotfiles; then
        source $HOME/.zshrc &>/dev/null </dev/tty
    fi
    zle accept-line
}
zle -N source_dotfiles

# ffind widget (for fuzzy finding files)
function ffind() {
    file=$(
    fd --full-path "$(git rev-parse --show-toplevel 2>/dev/null)"  "$FZF_ROOT" --type f --hidden --follow --exclude ".git" | fzf \
        --height 25 \
        --preview 'bat --style=numbers --color=always --line-range :20 {}'
    )

    if [ -n "${file}" ]; then
        nvim "$file" </dev/tty ||
            vim "$file" </dev/tty
    fi
    zle accept-line
}
zle -N ffind

# ffind widget (fuzzy find from home)
function hfind() {
    local dir
    dir=$(fd . "$FZF_ROOT" --type d --hidden --follow --exclude ".git" |
        fzf +m) && cd "$dir" || return
            zle accept-line
        }
    zle -N hfind

# ffind widget (fuzzy find from current git repository)

function gfind() {
    local dir
    dir=$(fd --full-path "$(fuzzy.sh)" "$FZF_ROOT" --type d --hidden --follow --exclude ".git" |
        fzf +m) && cd "$dir" || return
            zle accept-line
        }
    zle -N gfind

# exit terminal widget
function exit_terminal() {
    exit
    zle accept-line
}
zle -N exit_terminal

autoload edit-command-line
zle -N edit-command-line


# MAPPING WIDGETS: ------------------------------------------------------------

# exit terminal using [q]: normal mode
bindkey -M vicmd 'q' exit_terminal # in vim cmd mode

# source dotfiles using [`] in normal & insert mode
bindkey -M viins "\`" source_dotfiles
bindkey -M vicmd "\`" source_dotfiles

# fuzzy find open a file using ['] in insert mode
bindkey -M vicmd "'" ffind

# fuzzy find (from home directory) and cd using [;] in normal mode
bindkey -M vicmd "/" hfind

# fuzzy find (from current git repo) and cd using [/] in normal mode
bindkey -M vicmd ";" gfind

# open terminal with [CTRL-e]
bindkey '^e' edit-command-line

# VIM movement keys
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
